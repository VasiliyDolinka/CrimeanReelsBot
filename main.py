import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
import smtplib
from email.message import EmailMessage

# –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
BOT_TOKEN = "7753772066:AAG9KTQsz-XrF5vL_37iYN9GZT5xbFq72Lw"
GMAIL_USER = "Dolinkavasya@gmail.com"
GMAIL_PASS = "ryhjddfntifhnmha"
GROUP_CHAT_ID = -1002126781384

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    business = State()
    task = State()
    budget = State()
    name = State()
    phone = State()

async def send_email(subject, body):
    msg = EmailMessage()
    msg.set_content(body)
    msg["Subject"] = subject
    msg["From"] = GMAIL_USER
    msg["To"] = GMAIL_USER

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
        smtp.login(GMAIL_USER, GMAIL_PASS)
        smtp.send_message(msg)

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å üéû Reels –¥–ª—è —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ üìà\n\n"
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ üëá"
    )
    await state.set_state(Form.business)

@dp.message(Form.business)
async def process_business(message: Message, state: FSMContext):
    await state.update_data(business=message.text)
    await message.answer("‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫—É—é –∑–∞–¥–∞—á—É —Ç—ã —Ö–æ—á–µ—à—å —Ä–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é Reels?")
    await state.set_state(Form.task)

@dp.message(Form.task)
async def process_task(message: Message, state: FSMContext):
    await state.update_data(task=message.text)
    await message.answer("üí∏ –ö–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ —Å—ä—ë–º–∫—É?")
    await state.set_state(Form.budget)

@dp.message(Form.budget)
async def process_budget(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await message.answer("üë§ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –ò –æ—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()

    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username or message.from_user.full_name}\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['business']}\n"
        f"üõ† –ó–∞–¥–∞—á–∞: {data['task']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}"
    )

    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=text)
    except:
        pass

    await send_email("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç Telegram-–±–æ—Ç–∞", text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∑–∞—è–≤–∫—É! –•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è ‚òÄÔ∏è")
    await state.clear()

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())